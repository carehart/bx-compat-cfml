/**
 * [BoxLang]
 *
 * Copyright [2023] [Ortus Solutions, Corp]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java:ortus.boxlang.runtime.types.immutable.ImmutableStruct;
import java:ortus.boxlang.runtime.scopes.Key;

/**
 * Improves queryExecute() and Query component compatibility with CFML syntax and options.
 *
 * <ul>
 * <li>Alias `cfsqltype` to `sqltype` in the query parameters</li>
 * <li>Adds  `blockfactor` to `fetchsize` in the query options.</li>
 * </ul>
 */
class{

	function configure(){
		// Nothing to do here
	}

	/**
	 * Listen to query construction and modify the query parameters, copying `cfsqltype` to `sqltype`
	 *
	 * Incoming data:
	 * - sql : The SQL string
	 * - parameters : The parameters to be used in the query
	 * - pendingQuery : The BoxLang query class used to build and execute queries
	 * - options : A struct of query options, if any, set at query time via `queryExecute()` or `<bx:query>`
	 */
	function onQueryBuild( struct data ){
		if ( IsStruct( data.bindings ) ){
			data.bindings.each( ( key, param ) -> {
				if( isStruct( param ) && param.keyExists( "cfsqltype" ) && !param.keyExists( "sqltype" ) ){
					param.sqltype = param.cfsqltype;
				}
			});
		} else if ( IsArray( data.bindings ) ){
			data.bindings.map( ( param ) -> {
				if( isStruct( param ) && param.keyExists( "cfsqltype" ) && !param.keyExists( "sqltype" ) ){
					param.sqltype = param.cfsqltype;
				}
			});
		}

		// add blockfactor -> fetchsize alias
		if( data.options.keyExists( "blockfactor" ) && !data.options.keyExists( "fetchSize" ) ){
			data.options.fetchSize = data.options.blockfactor;
		}
	}

}
